#!/usr/bin/env python

from __future__ import annotations
from typing import MutableMapping
import h5py as h5
from numpy.random import default_rng
import numpy as np
from math import pi


def make_eventum_array(multiplicities: np.ndarray) -> np.ndarray:
    n_events = len(multiplicities)
    return np.repeat(np.arange(n_events), repeats=multiplicities)


def make_index_array(multiplicities: np.ndarray) -> np.ndarray:
    return np.concatenate([np.arange(i) for i in multiplicities])


def make_particles(
    particle_name: str,
    outfile: h5.File,
    multiplicities: np.ndarray,
    pt_scale: float,
    eta_sd: float,
    gen,
) -> None:
    """Generate standard particle data for the specified particle name,
    and for the specified event multiplicities.and

    Write the result to the open file 'outfile'.
    """
    n_total = multiplicities.sum()
    evtnum = make_eventum_array(multiplicities)
    idx = make_index_array(multiplicities)
    pt = gen.exponential(scale=pt_scale, size=n_total)
    phi = gen.uniform(0.0, 2 * pi, size=n_total)
    eta = gen.normal(0.0, eta_sd, size=n_total)
    vtx_x = gen.normal(0.0, 1e-3, size=n_total)
    vtx_y = gen.normal(0.0, 1e-3, size=n_total)
    vtx_z = gen.normal(0.0, 1.0, size=n_total)
    new_group = outfile.create_group(particle_name)
    new_group.attrs["index_cols"] = ["evtnum", f"{particle_name}_idx"]
    new_group["evtnum"] = evtnum
    new_group[f"{particle_name}_idx"] = idx
    new_group["pt"] = pt
    new_group["phi"] = phi
    new_group["eta"] = eta
    new_group["x"] = vtx_x
    new_group["y"] = vtx_y
    new_group["z"] = vtx_z


def make_events(
    outfile: h5.File,
    n_events: int,
    electron_multiplicities: np.ndarray,
    muon_multiplicities: np.ndarray,
    gen: np.random.Generator,
) -> None:
    new_group = outfile.create_group("events")
    new_group["evtnum"] = np.arange(n_events)
    new_group["nelectrons"] = electron_multiplicities
    new_group["nmuons"] = muon_multiplicities
    new_group["met"] = gen.chisquare(5, n_events) * 10
    new_group.attrs["index_cols"] = ["evtum"]


def make_particle_qualities(
    tablename: str,
    outfile: h5.File,
    multiplicities: np.ndarray,
    gen: np.random.Generator,
) -> None:
    n_total = multiplicities.sum()
    evtnum = make_eventum_array(multiplicities)
    idx = make_index_array(multiplicities)
    q1 = gen.uniform(0.0, 1.0, size=n_total)
    q2 = gen.uniform(0.0, 1.0, size=n_total)
    new_group = outfile.create_group(tablename)
    new_group.attrs["index_cols"] = ["evtnum", "idx"]
    new_group["evtnum"] = evtnum
    new_group["idx"] = idx
    new_group["q1"] = q1
    new_group[f"q2"] = q2


def make_file(outfile):
    """Write an HDF5 file in the tidy-data format."""
    n_events = 10
    expected_electrons = 2.5
    expected_muons = 3.5
    # Every table generated should have its own random number stream, seeded,
    # for reproducibility.

    egen = default_rng(seed=123)
    electron_multiplicities = egen.poisson(lam=expected_electrons, size=n_events)
    make_particles("electrons", outfile, electron_multiplicities, 30.0, 1.5, egen)

    mgen = default_rng(seed=1423)
    muon_multiplicities = mgen.poisson(lam=expected_muons, size=n_events)
    make_particles("muons", outfile, muon_multiplicities, 50, 2.1, mgen)

    # Add another table with the same "electrons" grouping level, with new values
    # for each electron in each event.
    eqgen = default_rng(seed=137)
    make_particle_qualities("elequal", outfile, electron_multiplicities, eqgen)

    egen = default_rng(seed=713)
    make_events(outfile, n_events, electron_multiplicities, muon_multiplicities, egen)


if __name__ == "__main__":
    # Note: changing this seed with result in a file that
    # contains data other than those expected by the test suite.

    with h5.File("small.h5", "w") as f:
        make_file(f)
